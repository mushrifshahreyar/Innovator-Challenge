export declare enum SelectType {
    single = "single",
    multi = "multi"
}
export declare enum ActionPlacement {
    After = "After",
    Before = "Before"
}
/**
 * Action
 * @isViewNode true
 */
export interface ToolBarAction {
    /**
     * Enables single selection for a bound action
     */
    enableOnSelect?: SelectType;
}
/**
 * Action
 * @isViewNode true
 */
export interface ViewToolBarAction {
    /**
     * Enables single selection for a bound action
     */
    enableOnSelect?: SelectType;
}
export declare type ChartToolBarAction = {};
/**
 * Actions
 * @isViewNode true
 */
export interface Actions {
    [key: string]: ToolBarAction | CustomAction;
}
/**
 * Actions
 * @isViewNode true
 */
export interface ViewActions {
    [key: string]: ViewToolBarAction | ChartToolBarAction | ViewTableCustomAction;
}
/**
 * Table Toolbar
 * @isViewNode true
 */
export interface ToolBar {
    actions: Actions;
}
/**
 * Chart Toolbar
 * @isViewNode true
 */
export interface ViewChartToolBar {
    actions: ViewActions;
}
export interface CustomActionPosition {
    /**
     * The key of another action to be used as placement anchor.
     */
    anchor?: string;
    /**
     * Define the placement, either before or after the anchor action.
     */
    placement: ActionPlacement;
}
/**
 * Action
 * @isViewNode true
 */
export interface CustomAction {
    /**
     * The text that is displayed on the button (typically a binding to an i18n entry).
     * @i18nClassification COL: Custom action text
     */
    text: string;
    /**
     * Defines the position of the action relative to other actions.
     */
    position?: CustomActionPosition;
    /**
     * Relevant for extension actions; allows the definition of a target action handler.
     */
    press: string;
    /**
     * Indicates whether the action requires a selection of items.
     */
    requiresSelection?: boolean;
    /**
     * Whether the action button should be visible on the screen.
     */
    visible?: boolean;
    /**
     * Whether the action button should be enabled. Default value is `true`.
     */
    enabled?: boolean;
}
export interface ViewCustomActionPosition extends CustomActionPosition {
    /**
     * The key of another action to be used as placement anchor.
     */
    anchor?: string;
}
export interface ViewTableCustomAction extends CustomAction {
    /**
     * Defines the position of the action relative to other actions.
     */
    position?: ViewCustomActionPosition;
}
