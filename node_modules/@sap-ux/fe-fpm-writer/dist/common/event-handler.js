"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyEventHandlerConfiguration = void 0;
const path_1 = require("path");
const utils_1 = require("../common/utils");
/**
 * Method creates or updates handler js file and update 'settings.eventHandler' entry with namespace path entry to method.
 *
 * @param {Editor} fs - the memfs editor instance
 * @param {string} root - the root path
 * @param {InternalCustomElement} config - configuration
 * @param {EventHandlerConfiguration | true | string} [eventHandler] - eventHandler for creation
 * @param {boolean} [controllerSuffix=false] - append controller suffix to new file
 * @returns {string} full namespace path to method
 */
function applyEventHandlerConfiguration(fs, root, config, eventHandler, controllerSuffix = false) {
    if (typeof eventHandler === 'string') {
        // Existing event handler is passed - no need for file creation/update
        return eventHandler;
    }
    // New event handler function name - 'onPress' is default
    let eventHandlerFnName = 'onPress';
    let insertScript;
    // By default - use config name for js file name
    let fileName = `${config.name}`;
    if (typeof eventHandler === 'object') {
        if (eventHandler.fnName) {
            eventHandlerFnName = eventHandler.fnName;
        }
        insertScript = eventHandler.insertScript;
        if (eventHandler.fileName) {
            // Use passed file name
            fileName = eventHandler.fileName;
        }
    }
    const controllerPath = path_1.join(config.path || '', `${fileName}${controllerSuffix ? '.controller' : ''}.js`);
    if (!fs.exists(controllerPath)) {
        fs.copyTpl(path_1.join(root, 'common/EventHandler.js'), controllerPath, {
            eventHandlerFnName
        });
    }
    else if (insertScript) {
        // Read current file content
        let content = fs.read(controllerPath);
        // Append content with additional script fragment
        if (typeof insertScript.position === 'object') {
            content = utils_1.insertTextAtPosition(insertScript.fragment, content, insertScript.position);
        }
        else {
            content = utils_1.insertTextAtAbsolutePosition(insertScript.fragment, content, insertScript.position);
        }
        fs.write(controllerPath, content);
    }
    // Return full namespace path to method
    return `${config.ns}.${fileName}.${eventHandlerFnName}`;
}
exports.applyEventHandlerConfiguration = applyEventHandlerConfiguration;
//# sourceMappingURL=event-handler.js.map