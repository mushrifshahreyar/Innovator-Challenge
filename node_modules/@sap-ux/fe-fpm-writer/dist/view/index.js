"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCustomView = void 0;
const mem_fs_1 = require("mem-fs");
const mem_fs_editor_1 = require("mem-fs-editor");
const path_1 = require("path");
const ejs_1 = require("ejs");
const validate_1 = require("../common/validate");
const defaults_1 = require("../common/defaults");
const event_handler_1 = require("../common/event-handler");
/**
 * Enhances the provided custom view configuration with default data.
 *
 * @param {Editor} fs - the mem-fs editor instance
 * @param {string} root - root path
 * @param {CustomView} data - a custom view configuration object
 * @param {string} manifestPath - path to the project's manifest.json
 * @param {Manifest} manifest - the application manifest
 * @returns enhanced configuration
 */
function enhanceConfig(fs, root, data, manifestPath, manifest) {
    var _a, _b, _c, _d, _e;
    const config = Object.assign({}, data);
    defaults_1.setCommonDefaults(config, manifestPath, manifest);
    // Apply event handler
    if (config.eventHandler) {
        config.eventHandler = event_handler_1.applyEventHandlerConfiguration(fs, root, config, config.eventHandler, true);
    }
    // existing views
    const existingViews = (_e = (_d = ((_c = (_b = (_a = manifest['sap.ui5']) === null || _a === void 0 ? void 0 : _a.routing) === null || _b === void 0 ? void 0 : _b.targets) === null || _c === void 0 ? void 0 : _c[data.target])
        .options) === null || _d === void 0 ? void 0 : _d.settings) === null || _e === void 0 ? void 0 : _e.views;
    if (existingViews) {
        config.views = existingViews;
    }
    // generate view content
    if (typeof config.control === 'string') {
        config.content = config.control;
    }
    else {
        config.content = defaults_1.getDefaultFragmentContent(config.name, config.eventHandler, true);
    }
    return config;
}
/**
 * Add a custom view to an existing UI5 application.
 *
 * @param {string} basePath - the base path
 * @param {CustomView} customView - the custom view configuration
 * @param {Editor} [fs] - the mem-fs editor instance
 * @returns {Promise<Editor>} the updated mem-fs editor instance
 */
function generateCustomView(basePath, customView, fs) {
    validate_1.validateVersion(customView.ui5Version);
    if (!fs) {
        fs = mem_fs_editor_1.create(mem_fs_1.create());
    }
    validate_1.validateBasePath(basePath, fs);
    const manifestPath = path_1.join(basePath, 'webapp/manifest.json');
    const manifest = fs.readJSON(manifestPath);
    const root = path_1.join(__dirname, '../../templates');
    // merge with defaults
    const completeView = enhanceConfig(fs, root, customView, manifestPath, manifest);
    // enhance manifest with view definition
    const filledTemplate = ejs_1.render(fs.read(path_1.join(root, 'view', `manifest.json`)), completeView);
    fs.extendJSON(manifestPath, JSON.parse(filledTemplate));
    // add fragment
    const viewPath = path_1.join(completeView.path, `${completeView.name}.fragment.xml`);
    if (completeView.control === true) {
        fs.copyTpl(path_1.join(root, 'view/ext/CustomViewWithTable.xml'), viewPath, completeView);
    }
    else if (!fs.exists(viewPath)) {
        fs.copyTpl(path_1.join(root, 'common/Fragment.xml'), viewPath, completeView);
    }
    return fs;
}
exports.generateCustomView = generateCustomView;
//# sourceMappingURL=index.js.map